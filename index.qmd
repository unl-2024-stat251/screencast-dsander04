---
author: "Dominic Sander"
date: "2023-05-04"
title: "Project: Screencast"
output: html
categories: project
---

# Project Description

For your final project (which will take the place of the final exam), you will be recording a screencast in the style of David Robinson's TidyTuesday screencasts.

You can find time-stamped, catalogued versions of some of David Robinson's screencasts [here](https://www.rscreencasts.com/). 

Requirements:

- Your screencast should be approximately 45 minutes long.
- Your screencast should show your analysis of a [TidyTuesday dataset from 2023](https://github.com/rfordatascience/tidytuesday)
- You should showcase at least 4 different techniques you've learned in Stat 251. Some examples include:

    - data cleaning (dplyr) verbs
    - reshaping data (tidyr)
    - working with dates and times (lubridate)
    - working with strings (stringr)
    - writing functions to modularize your code
    - visualizing your data effectively
    
Unlike David Robinson's screencasts, you will write a rough pseudocode "script" before you start recording. 
This will give you a rough outline of how to do the analysis and what things you intend to cover.

Your goal is to help a future Stat 251 student understand some of the topics covered in this class. 
So while David Robinson and others who record their screencasts live might not fully explain what he's doing, you should take the time to explain each technique you decide to use in a way that will help someone else understand.


There will be three deliverables for this project:

1. [Plan your dataset and topics](Dataset-Topics.qmd)
2. [Pseudocode script](pseudocode.qmd) uploaded to github repository
3. Screencast + github repository
    - Screencast uploaded to YouTube/YuJa
    - Approximate time index provided for each of the 4 techniques you're demonstrating ([examples](https://www.rscreencasts.com/))
    - Code uploaded to github repository

In lieu of the final exam, you will peer review two classmates' screencasts. 

```{R}
scoobydoo <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-13/scoobydoo.csv')

```

```{R}
library(tidyverse)
library(ggplot2)

```


DATE AIRED
```{R}
years <- scoobydoo %>% 
  select(index, date_aired, format) %>%
  mutate(date_aired = as.Date(date_aired)) %>%
  separate(date_aired, c("Year","Month","Day"), sep = "-") %>%
  mutate(year = as.numeric(year))

sixties <- years %>%
  filter(Year < 1970)

seventies <- years %>%
  filter(Year >= 1970 & Year <=1979)

eighties <- years %>%
  filter(Year > 1979 & Year <1991)

nineties <- years %>%
  filter(Year > 1989 & Year <2001)

twothousands <- years %>%
  filter(Year > 1999 & Year <2011)

twentytens <- years %>%
  filter(Year > 2009 & Year <2021)

twentytwenties <- years %>%
  filter(Year >2019)

decade_count <- data.frame(
  Decade = c("1960s", "1970s", "1980s", "1990s", "2000s", "2010s", "2020s"),
  Count = c(nrow(sixties), nrow(seventies), nrow(eighties), nrow(nineties), nrow(twothousands), nrow(twentytens), nrow(twentytwenties))
)

ggplot(decade_count, aes(x=Decade, y=Count, fill=Decade)) +
  geom_bar(stat="identity") +
  labs(title = "Pieces of Scooby-Doo Media by Decade")
```

MORE MESSING AROUND WITH DATES
```{R}
library(lubridate)

birthday <- years %>%
  filter(Month == "07", Day == "18")

january <- years %>%
  filter(Month == "01")

random <- scoobydoo %>%
  filter(index == "347")

adding <- years %>%
  mutate(date = make_date(Year, Month, Day)) %>%
  filter(index == "100")
adding2 <- adding$date %m+% months(6)

difference <- years %>%
  mutate(date=make_date(Year, Month, Day)) %>%
  filter(index=="200")

time_diff <- difftime(difference$date, adding$date)
print(time_diff)

```


CATCHPHRASES
```{R}
catchphrases <- scoobydoo %>%
  mutate(across(everything(), as.numeric)) %>%
  select(split_up, another_mystery, set_a_trap, jeepers, jinkies, my_glasses, just_about_wrapped_up, zoinks, groovy, scooby_doo_where_are_you, rooby_rooby_roo)

catchphrases <- catchphrases %>%
  mutate_all(~ifelse(.=="NULL", 0, .)) %>%
  mutate_all(~ifelse(is.na(.), 0, .))

catchphrase_count <- colSums(catchphrases)

catchphrase_count <- data.frame(catchphrase = names(catchphrases), count = catchphrase_count)

ggplot(catchphrase_count, aes(x=catchphrase, y=count)) + geom_bar(stat="identity") + labs(title="Catchphrase Popularity") + theme(axis.text.x = element_text(angle=45, hjust=1))
```


VOICE ACTORS
```{R}
voices <- scoobydoo %>% 
  select(fred_va, daphnie_va, velma_va, shaggy_va, scooby_va)

scooby_function <- function(voices){
  na.omit(voices)
  
unique_va <- sapply(voices, function(x) length(unique(x)))

return(unique_va)
}
scooby_function(voices)

for(i in new)
  number = length(unique(i))
filter(!"NULL")
```


RUN TIMES
```{R}
runtimes <- scoobydoo%>%
  select(index, run_time, format) %>%
  na.omit()

total_time <- runtimes %>%
  group_by(format) %>%
  summarize(run_total = sum(run_time))
  
total_time

ggplot(total_time, aes(x=format, y=run_total)) + geom_bar(stat="identity", fill="lightblue") + labs(title = "Total RunTime by Format")
```


ENGAGEMENT AND RATINGS
```{R}
ratings <- scoobydoo %>%
  select(imdb, engagement, format) %>%
  na.omit() %>%
  filter(!engagement=="NULL")

ratings <- ratings %>%
  mutate(imdb = as.numeric(imdb)) %>%
  mutate(engagement = as.numeric(engagement))

ggplot(ratings, aes(x=imdb, y=engagement, color=format)) + geom_point() + labs(title="IMDB vs. ENGAGEMENT")
```
